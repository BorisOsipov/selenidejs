import { By, WebElement } from 'selenium-webdriver';
import { ElementCondition } from '../conditions/elementCondition';
import { Collection } from './collection';
import { Driver } from './driver';
import { AfterElementActionHook } from './hooks/afterElementActionHook';
import { BeforeElementActionHook } from './hooks/beforeElementActionHook';
import { Locator } from './locators/locator';
export declare class Element {
    static beforeActionHooks: BeforeElementActionHook[];
    static afterActionHooks: AfterElementActionHook[];
    private readonly driver;
    private readonly locator;
    private readonly wait;
    constructor(locator: Locator<Promise<WebElement>>, driver: Driver);
    click(): Promise<void>;
    clickByJS(): Promise<void>;
    setValue(value: string | number): Promise<void>;
    setValueByJS(value: string | number): Promise<void>;
    sendKeys(value: string | number): Promise<void>;
    doubleClick(): Promise<void>;
    hover(): Promise<void>;
    contextClick(): Promise<void>;
    pressEnter(): Promise<void>;
    pressEscape(): Promise<void>;
    pressTab(): Promise<void>;
    scrollIntoView(): Promise<void>;
    should(condition: ElementCondition, timeout?: number): Promise<Element>;
    shouldNot(condition: ElementCondition): Promise<Element>;
    is(condition: ElementCondition, timeout?: number): Promise<boolean>;
    isNot(condition: ElementCondition): Promise<boolean>;
    isVisible(): Promise<boolean>;
    isPresent(): Promise<boolean>;
    isAbsent(): Promise<boolean>;
    text(): Promise<string>;
    hasAttribute(attributeName: string): Promise<boolean>;
    attribute(attributeName: string): Promise<string>;
    innerHtml(): Promise<string>;
    outerHtml(): Promise<string>;
    value(): Promise<string>;
    getWebElement(): Promise<WebElement>;
    parent(): Element;
    followingSibling(predicate?: string): Element;
    element(cssOrXpathOrBy: string | By): Element;
    visibleElement(cssSelector: string): Element;
    all(cssOrXpathOrBy: string | By): Collection;
    equals(element: Element): Promise<boolean>;
    toString(): string;
}
