import { Locator } from './locators/locator';
import { Collection } from './collection';
import { By, WebElement } from "selenium-webdriver";
import { ElementCondition } from "../conditions/elementCondition";
export declare class Element {
    private readonly locator;
    constructor(locator: Locator<Promise<WebElement>>);
    click(): Promise<void>;
    clickByJS(): Promise<void>;
    setValue(value: string | number): Promise<void>;
    setValueByJS(value: string | number): Promise<void>;
    sendKeys(value: string | number): Promise<void>;
    fireEvent(...events: string[]): Promise<void>;
    doubleClick(): Promise<void>;
    hover(): Promise<void>;
    contextClick(): Promise<void>;
    pressEnter(): Promise<void>;
    pressEscape(): Promise<void>;
    pressTab(): Promise<void>;
    scrollIntoView(): Promise<void>;
    should(condition: ElementCondition, timeout?: number): Promise<Element>;
    shouldNot(condition: ElementCondition): Promise<Element>;
    is(condition: ElementCondition, timeout?: number): Promise<boolean>;
    isNot(condition: ElementCondition): Promise<boolean>;
    isVisible(): Promise<boolean>;
    isPresent(): Promise<boolean>;
    isAbsent(): Promise<boolean>;
    value(): Promise<string>;
    text(): Promise<string>;
    attribute(attributeName: string): Promise<string>;
    getWebElement(): Promise<WebElement>;
    private performActionOnVisible(action, actionName);
    parent(): Element;
    followingSibling(predicate?: string): Element;
    element(cssOrLocator: string | By): Element;
    elementSmart(locator: string): Element;
    visibleElement(cssSelector: string): Element;
    all(locator: string | By): Collection;
    toString(): string;
}
export declare function element(locator: string | By): Element;
export declare function visibleElement(cssSelector: string): Element;
export declare function elementSmart(locator: string): Element;
